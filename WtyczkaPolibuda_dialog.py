# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WtyczkaNaZajeciahDialog
                                 A QGIS plugin
 wtyczka do Qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Jakub Tokarski
        email                : 01169935@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'WtyczkaPolibuda_dialog_base.ui'))


class WtyczkaNaZajeciahDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WtyczkaNaZajeciahDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.Przycisk1.clicked.connect(self.count_selected_features)
    
        self.Przycisk2.clicked.connect(self.show_layer_name)
        self.Przycisk2.clicked.connect(self.display_coords)
    
    def display_coords(self):
        selected_featres = self.mMapLayerComboBox.currentLayer().selectedFeatures()
        for feature in selected_featres:
            feature_geometry = feature.geometry().asPoint()
            self.textEdit.append(f'{feature_geometry}\n')
    
    def count_selected_features(self):
        number_of_selected_featres = len(self.mMapLayerComboBox.currentLayer().selectedFeatures())
        self.label.setText(str(number_of_selected_featres))
        
    def show_layer_name(self):
        layer_name = self.mMapLayerComboBox.currentLayer().name()
        self.label_2.setText(layer_name)